//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Guns/Input/GunInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GunInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GunInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GunInputs"",
    ""maps"": [
        {
            ""name"": ""Shoot"",
            ""id"": ""213bd10c-2380-492f-bd20-e4e8cc728c17"",
            ""actions"": [
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""9e598b7c-9393-48de-a835-625869185662"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""32c1f959-e12a-4c9d-b177-215e8a99fc0e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c4a17e02-26b7-4641-99ab-2605af901619"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fc57915-300a-4e25-8461-ff8c1d1c8bbf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ChangeSettings"",
            ""id"": ""2a22da0d-535c-4bfe-b7db-b9a992c4d5c9"",
            ""actions"": [
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e7c86b2f-7f0f-48a2-b92a-976a1a02f225"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KeyboardE"",
                    ""type"": ""Button"",
                    ""id"": ""b44336cb-3d5d-4249-91d9-293e6640b697"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KeyboardQ"",
                    ""type"": ""Button"",
                    ""id"": ""0a71864e-bf7e-4406-9028-5c5db8f4b371"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bfc527a9-7736-4720-bf1b-b49d03599fac"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13b169b0-2f40-4f2c-be29-376badd93a38"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89b06322-8bc2-405f-9c61-5eb25878726f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardQ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ChangeGun"",
            ""id"": ""6d1aaf6a-9808-46b9-95af-990bdf83e747"",
            ""actions"": [
                {
                    ""name"": ""ChangeGun"",
                    ""type"": ""Button"",
                    ""id"": ""f8d71b1f-f6f7-4505-b248-9c15bb6b48c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4ce33f2e-efcc-4312-8c0c-cb8b8f37a226"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeGun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Shoot
        m_Shoot = asset.FindActionMap("Shoot", throwIfNotFound: true);
        m_Shoot_RightClick = m_Shoot.FindAction("RightClick", throwIfNotFound: true);
        m_Shoot_LeftClick = m_Shoot.FindAction("LeftClick", throwIfNotFound: true);
        // ChangeSettings
        m_ChangeSettings = asset.FindActionMap("ChangeSettings", throwIfNotFound: true);
        m_ChangeSettings_MouseScroll = m_ChangeSettings.FindAction("MouseScroll", throwIfNotFound: true);
        m_ChangeSettings_KeyboardE = m_ChangeSettings.FindAction("KeyboardE", throwIfNotFound: true);
        m_ChangeSettings_KeyboardQ = m_ChangeSettings.FindAction("KeyboardQ", throwIfNotFound: true);
        // ChangeGun
        m_ChangeGun = asset.FindActionMap("ChangeGun", throwIfNotFound: true);
        m_ChangeGun_ChangeGun = m_ChangeGun.FindAction("ChangeGun", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Shoot
    private readonly InputActionMap m_Shoot;
    private IShootActions m_ShootActionsCallbackInterface;
    private readonly InputAction m_Shoot_RightClick;
    private readonly InputAction m_Shoot_LeftClick;
    public struct ShootActions
    {
        private @GunInputs m_Wrapper;
        public ShootActions(@GunInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightClick => m_Wrapper.m_Shoot_RightClick;
        public InputAction @LeftClick => m_Wrapper.m_Shoot_LeftClick;
        public InputActionMap Get() { return m_Wrapper.m_Shoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShootActions set) { return set.Get(); }
        public void SetCallbacks(IShootActions instance)
        {
            if (m_Wrapper.m_ShootActionsCallbackInterface != null)
            {
                @RightClick.started -= m_Wrapper.m_ShootActionsCallbackInterface.OnRightClick;
                @RightClick.performed -= m_Wrapper.m_ShootActionsCallbackInterface.OnRightClick;
                @RightClick.canceled -= m_Wrapper.m_ShootActionsCallbackInterface.OnRightClick;
                @LeftClick.started -= m_Wrapper.m_ShootActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_ShootActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_ShootActionsCallbackInterface.OnLeftClick;
            }
            m_Wrapper.m_ShootActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RightClick.started += instance.OnRightClick;
                @RightClick.performed += instance.OnRightClick;
                @RightClick.canceled += instance.OnRightClick;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
            }
        }
    }
    public ShootActions @Shoot => new ShootActions(this);

    // ChangeSettings
    private readonly InputActionMap m_ChangeSettings;
    private IChangeSettingsActions m_ChangeSettingsActionsCallbackInterface;
    private readonly InputAction m_ChangeSettings_MouseScroll;
    private readonly InputAction m_ChangeSettings_KeyboardE;
    private readonly InputAction m_ChangeSettings_KeyboardQ;
    public struct ChangeSettingsActions
    {
        private @GunInputs m_Wrapper;
        public ChangeSettingsActions(@GunInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseScroll => m_Wrapper.m_ChangeSettings_MouseScroll;
        public InputAction @KeyboardE => m_Wrapper.m_ChangeSettings_KeyboardE;
        public InputAction @KeyboardQ => m_Wrapper.m_ChangeSettings_KeyboardQ;
        public InputActionMap Get() { return m_Wrapper.m_ChangeSettings; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChangeSettingsActions set) { return set.Get(); }
        public void SetCallbacks(IChangeSettingsActions instance)
        {
            if (m_Wrapper.m_ChangeSettingsActionsCallbackInterface != null)
            {
                @MouseScroll.started -= m_Wrapper.m_ChangeSettingsActionsCallbackInterface.OnMouseScroll;
                @MouseScroll.performed -= m_Wrapper.m_ChangeSettingsActionsCallbackInterface.OnMouseScroll;
                @MouseScroll.canceled -= m_Wrapper.m_ChangeSettingsActionsCallbackInterface.OnMouseScroll;
                @KeyboardE.started -= m_Wrapper.m_ChangeSettingsActionsCallbackInterface.OnKeyboardE;
                @KeyboardE.performed -= m_Wrapper.m_ChangeSettingsActionsCallbackInterface.OnKeyboardE;
                @KeyboardE.canceled -= m_Wrapper.m_ChangeSettingsActionsCallbackInterface.OnKeyboardE;
                @KeyboardQ.started -= m_Wrapper.m_ChangeSettingsActionsCallbackInterface.OnKeyboardQ;
                @KeyboardQ.performed -= m_Wrapper.m_ChangeSettingsActionsCallbackInterface.OnKeyboardQ;
                @KeyboardQ.canceled -= m_Wrapper.m_ChangeSettingsActionsCallbackInterface.OnKeyboardQ;
            }
            m_Wrapper.m_ChangeSettingsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseScroll.started += instance.OnMouseScroll;
                @MouseScroll.performed += instance.OnMouseScroll;
                @MouseScroll.canceled += instance.OnMouseScroll;
                @KeyboardE.started += instance.OnKeyboardE;
                @KeyboardE.performed += instance.OnKeyboardE;
                @KeyboardE.canceled += instance.OnKeyboardE;
                @KeyboardQ.started += instance.OnKeyboardQ;
                @KeyboardQ.performed += instance.OnKeyboardQ;
                @KeyboardQ.canceled += instance.OnKeyboardQ;
            }
        }
    }
    public ChangeSettingsActions @ChangeSettings => new ChangeSettingsActions(this);

    // ChangeGun
    private readonly InputActionMap m_ChangeGun;
    private IChangeGunActions m_ChangeGunActionsCallbackInterface;
    private readonly InputAction m_ChangeGun_ChangeGun;
    public struct ChangeGunActions
    {
        private @GunInputs m_Wrapper;
        public ChangeGunActions(@GunInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeGun => m_Wrapper.m_ChangeGun_ChangeGun;
        public InputActionMap Get() { return m_Wrapper.m_ChangeGun; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChangeGunActions set) { return set.Get(); }
        public void SetCallbacks(IChangeGunActions instance)
        {
            if (m_Wrapper.m_ChangeGunActionsCallbackInterface != null)
            {
                @ChangeGun.started -= m_Wrapper.m_ChangeGunActionsCallbackInterface.OnChangeGun;
                @ChangeGun.performed -= m_Wrapper.m_ChangeGunActionsCallbackInterface.OnChangeGun;
                @ChangeGun.canceled -= m_Wrapper.m_ChangeGunActionsCallbackInterface.OnChangeGun;
            }
            m_Wrapper.m_ChangeGunActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeGun.started += instance.OnChangeGun;
                @ChangeGun.performed += instance.OnChangeGun;
                @ChangeGun.canceled += instance.OnChangeGun;
            }
        }
    }
    public ChangeGunActions @ChangeGun => new ChangeGunActions(this);
    public interface IShootActions
    {
        void OnRightClick(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
    }
    public interface IChangeSettingsActions
    {
        void OnMouseScroll(InputAction.CallbackContext context);
        void OnKeyboardE(InputAction.CallbackContext context);
        void OnKeyboardQ(InputAction.CallbackContext context);
    }
    public interface IChangeGunActions
    {
        void OnChangeGun(InputAction.CallbackContext context);
    }
}
